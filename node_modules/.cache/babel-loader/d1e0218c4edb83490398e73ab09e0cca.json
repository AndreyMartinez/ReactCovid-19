{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _Builder = require(\"../Builder\");\n\nexports.default = function (_ref) {\n  var dx = _ref.dx,\n      dy = _ref.dy,\n      start = _ref.start,\n      end = _ref.end,\n      _ref$scale = _ref.scale,\n      scale = _ref$scale === undefined ? 1 : _ref$scale;\n\n  if (!start) {\n    start = [dx, dy];\n  } else {\n    start = [-end[0] + start[0], -end[1] + start[1]];\n  }\n\n  if (!end) {\n    end = [0, 0];\n  }\n\n  var x1 = end[0],\n      y1 = end[1];\n  var size = 10 * scale;\n  var angleOffset = 16 / 180 * Math.PI;\n  var angle = Math.atan(start[1] / start[0]);\n\n  if (start[0] < 0) {\n    angle += Math.PI;\n  }\n\n  var data = [[x1, y1], [Math.cos(angle + angleOffset) * size + x1, Math.sin(angle + angleOffset) * size + y1], [Math.cos(angle - angleOffset) * size + x1, Math.sin(angle - angleOffset) * size + y1], [x1, y1]]; //TODO add in reverse\n  // if (canvasContext.arrowReverse){\n  //   data = [[x1, y1],\n  //   [Math.cos(angle + angleOffset)*size, Math.sin(angle + angleOffset)*size],\n  //   [Math.cos(angle - angleOffset)*size, Math.sin(angle - angleOffset)*size],\n  //   [x1, y1]\n  //   ]\n  // } else {\n  //   data = [[x1, y1],\n  //   [Math.cos(angle + angleOffset)*size, Math.sin(angle + angleOffset)*size],\n  //   [Math.cos(angle - angleOffset)*size, Math.sin(angle - angleOffset)*size],\n  //   [x1, y1]\n  //   ]\n  // }\n\n  return {\n    components: [(0, _Builder.lineBuilder)({\n      data: data,\n      className: \"connector-end connector-arrow\",\n      classID: \"connector-end\"\n    })]\n  };\n};","map":null,"metadata":{},"sourceType":"script"}