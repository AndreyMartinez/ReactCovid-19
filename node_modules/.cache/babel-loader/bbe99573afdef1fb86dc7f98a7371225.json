{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _alignment4 = _interopRequireDefault(require(\"viz-annotation/lib/Note/alignment\"));\n\nvar _Handle = _interopRequireDefault(require(\"../Handle\"));\n\nvar _lineTypeVertical = _interopRequireDefault(require(\"viz-annotation/lib/Note/lineType-vertical\"));\n\nvar _lineTypeHorizontal = _interopRequireDefault(require(\"viz-annotation/lib/Note/lineType-horizontal\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar getOuterBBox = function getOuterBBox() {\n  for (var _len = arguments.length, domNodes = new Array(_len), _key = 0; _key < _len; _key++) {\n    domNodes[_key] = arguments[_key];\n  }\n\n  return domNodes.concat().reduce(function (p, c) {\n    if (c) {\n      var bbox = c.getBBox();\n      p.x = Math.min(p.x, bbox.x);\n      p.y = Math.min(p.y, bbox.y);\n      p.width = Math.max(p.width, bbox.width);\n      var yOffset = c && c.attributes && c.attributes.y;\n      p.height = Math.max(p.height, (yOffset && parseFloat(yOffset.value) || 0) + bbox.height);\n    }\n\n    return p;\n  }, {\n    x: 0,\n    y: 0,\n    width: 0,\n    height: 0\n  });\n};\n\nvar Note = /*#__PURE__*/function (_React$Component) {\n  _inherits(Note, _React$Component);\n\n  function Note(props) {\n    var _this;\n\n    _classCallCheck(this, Note);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Note).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"state\", {\n      translateX: 0,\n      translateY: 0,\n      labelOffset: 0,\n      changed: 0,\n      bbox: {\n        width: 0,\n        height: 0,\n        x: 0,\n        y: 0\n      }\n    });\n\n    _this.updateText = _this.updateText.bind(_assertThisInitialized(_assertThisInitialized(_this))); // this.note = React.createRef()\n    // this.title = React.createRef()\n    // this.label = React.createRef()\n\n    return _this;\n  }\n\n  _createClass(Note, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.updateText(this.props);\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      if (nextProps.title !== this.props.title || nextProps.label !== this.props.label || nextProps.wrap !== this.props.wrap) {\n        this.updateText(nextProps);\n      }\n\n      if (nextProps.editMode && (nextProps.align === \"dynamic\" || !nextProps.align)) {\n        this.updateText(nextProps);\n      }\n    }\n  }, {\n    key: \"updateText\",\n    value: function updateText(_ref) {\n      var _this2 = this;\n\n      var orientation = _ref.orientation,\n          padding = _ref.padding,\n          align = _ref.align,\n          lineType = _ref.lineType,\n          label = _ref.label,\n          title = _ref.title,\n          wrap = _ref.wrap,\n          wrapSplitter = _ref.wrapSplitter,\n          dx = _ref.dx,\n          dy = _ref.dy;\n      var newState = {\n        titleWrapped: null,\n        labelWrapped: null\n      };\n      newState.changed = this.state.changed + 1;\n\n      if (title) {\n        newState.titleWrapped = this.title && this.wrapText(this.title, newState.changed, title, wrap, wrapSplitter);\n      }\n\n      if (label) newState.labelWrapped = this.label && this.wrapText(this.label, newState.changed, label, wrap, wrapSplitter);\n      this.setState(newState, function () {\n        var setLabel = function setLabel() {\n          var bbox = getOuterBBox(_this2.title, _this2.label);\n          var noteParams = {\n            padding: padding,\n            bbox: bbox,\n            offset: {\n              x: dx,\n              y: dy\n            },\n            orientation: orientation,\n            align: align\n          };\n          if (lineType === \"vertical\") noteParams.orientation = \"leftRight\";else if (lineType === \"horizontal\") noteParams.orientation = \"topBottom\";\n\n          var _alignment = (0, _alignment4.default)(noteParams),\n              x = _alignment.x,\n              y = _alignment.y;\n\n          _this2.setState({\n            translateX: x,\n            translateY: y,\n            bbox: bbox\n          });\n        };\n\n        _this2.setState({\n          labelOffset: title && _this2.title.getBBox().height || 0\n        }, setLabel);\n      });\n    }\n  }, {\n    key: \"wrapText\",\n    value: function wrapText(textRef, key, text, width, wrapSplitter) {\n      var initialAttrs = {\n        x: 0,\n        dy: \"1.2em\"\n      };\n      var words = text.split(wrapSplitter || /[ \\t\\r\\n]+/).reverse().filter(function (w) {\n        return w !== \"\";\n      });\n      var word,\n          line = [];\n      var tspans = [];\n\n      while (word = words.pop()) {\n        line.push(word);\n        textRef.lastChild.textContent = line.join(\" \");\n        var length = textRef.lastChild.getComputedTextLength();\n        textRef.lastChild.textContent = \"\";\n\n        if (length > width && line.length > 1) {\n          line.pop();\n          tspans.push(_react.default.createElement(\"tspan\", _extends({\n            key: tspans.length + text\n          }, initialAttrs), line.join(\" \")));\n          line = [word];\n        }\n      }\n\n      if (line.length !== 0) {\n        tspans.push(_react.default.createElement(\"tspan\", _extends({\n          key: tspans.length + text\n        }, initialAttrs), line.join(\" \")));\n      }\n\n      return _react.default.createElement(\"tspan\", _extends({}, initialAttrs, {\n        key: key + text\n      }), tspans);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var _this$props = this.props,\n          orientation = _this$props.orientation,\n          padding = _this$props.padding,\n          align = _this$props.align,\n          dx = _this$props.dx,\n          dy = _this$props.dy,\n          lineType = _this$props.lineType;\n\n      if (this.state.bbox.width && (prevProps.dx !== this.props.dx || prevProps.dy !== this.props.dy) && (this.title || this.label)) {\n        var bbox = getOuterBBox(this.title, this.label);\n        var noteParams = {\n          padding: padding,\n          bbox: bbox,\n          offset: {\n            x: dx,\n            y: dy\n          },\n          orientation: orientation,\n          align: align\n        };\n        if (lineType === \"vertical\") noteParams.orientation = \"leftRight\";else if (lineType === \"horizontal\") noteParams.orientation = \"topBottom\";\n\n        var _alignment2 = (0, _alignment4.default)(noteParams),\n            x = _alignment2.x,\n            y = _alignment2.y;\n\n        var updates = {\n          bbox: bbox\n        };\n        if (this.state.translateX !== x) updates.translateX = x;\n        if (this.state.translateY !== y) updates.translateY = y;\n\n        if (updates.translateX !== undefined || updates.translateY !== undefined) {\n          this.setState(updates);\n        }\n      } else if (this.state.align !== prevProps.align || this.props.orientation !== prevProps.orientation || this.props.padding !== prevProps.padding) {\n        var _noteParams = {\n          padding: padding,\n          bbox: this.state.bbox,\n          offset: {\n            x: dx,\n            y: dy\n          },\n          orientation: orientation,\n          align: align\n        };\n        if (lineType === \"vertical\") _noteParams.orientation = \"leftRight\";else if (lineType === \"horizontal\") _noteParams.orientation = \"topBottom\";\n\n        var _alignment3 = (0, _alignment4.default)(_noteParams),\n            _x = _alignment3.x,\n            _y = _alignment3.y;\n\n        var _updates = {};\n        if (this.state.translateX !== _x) _updates.translateX = _x;\n        if (this.state.translateY !== _y) _updates.translateY = _y;\n\n        if (_updates.translateX !== undefined || _updates.translateY !== undefined) {\n          this.setState(_updates);\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var _this$props2 = this.props,\n          dx = _this$props2.dx,\n          dy = _this$props2.dy,\n          title = _this$props2.title,\n          label = _this$props2.label,\n          align = _this$props2.align,\n          editMode = _this$props2.editMode,\n          lineType = _this$props2.lineType,\n          color = _this$props2.color,\n          titleColor = _this$props2.titleColor,\n          labelColor = _this$props2.labelColor,\n          bgPadding = _this$props2.bgPadding;\n      var bgPaddingFinal = {\n        top: 0,\n        bottom: 0,\n        left: 0,\n        right: 0\n      };\n\n      if (typeof bgPadding === \"number\") {\n        bgPaddingFinal = {\n          top: bgPadding,\n          bottom: bgPadding,\n          left: bgPadding,\n          right: bgPadding\n        };\n      } else if (bgPadding && _typeof(bgPadding) === \"object\") {\n        bgPaddingFinal = Object.assign(bgPaddingFinal, bgPadding);\n      }\n\n      var noteTitle, noteText, noteLineType;\n\n      if (title) {\n        noteTitle = _react.default.createElement(\"text\", {\n          ref: function ref(el) {\n            return _this3.title = el;\n          },\n          className: \"annotation-note-title\",\n          fontWeight: \"bold\",\n          key: \"title\",\n          fill: titleColor || color\n        }, this.state.titleWrapped || _react.default.createElement(\"tspan\", {\n          x: 0,\n          dy: \".8em\"\n        }, title));\n      }\n\n      if (label) {\n        noteText = _react.default.createElement(\"text\", {\n          ref: function ref(el) {\n            return _this3.label = el;\n          },\n          className: \"annotation-note-label\",\n          y: this.state.labelOffset * 1.1,\n          key: \"label\",\n          fill: labelColor || color\n        }, this.state.labelWrapped || _react.default.createElement(\"tspan\", {\n          x: 0,\n          dy: \".8em\"\n        }, label));\n      }\n\n      if (lineType && this.state.bbox.width) {\n        var noteParams = {\n          bbox: this.state.bbox,\n          align: align,\n          offset: {\n            x: dx,\n            y: dy\n          }\n        };\n        var noteComponent = (lineType === \"vertical\" && (0, _lineTypeVertical.default)(noteParams) || lineType === \"horizontal\" && (0, _lineTypeHorizontal.default)(noteParams)).components[0];\n        noteLineType = _react.default.createElement(noteComponent.type, _extends({\n          className: noteComponent.className\n        }, noteComponent.attrs, {\n          stroke: color\n        }));\n      }\n\n      var handle;\n\n      if (editMode) {\n        handle = _react.default.createElement(_Handle.default, {\n          handleStart: this.props.dragStart,\n          handleStop: this.props.dragEnd,\n          handleDrag: this.props.dragNote\n        });\n      }\n\n      return _react.default.createElement(\"g\", _extends({\n        transform: \"translate(\".concat(dx, \", \").concat(dy, \")\"),\n        className: \"annotation-note\"\n      }, this.props.gProps), _react.default.createElement(\"g\", {\n        className: \"annotation-note-content\",\n        transform: \"translate(\".concat(this.state.translateX, \",\\n          \").concat(this.state.translateY, \")\"),\n        ref: function ref(el) {\n          return _this3.note = el;\n        }\n      }, _react.default.createElement(\"rect\", {\n        className: \"annotation-note-bg\",\n        width: this.state.bbox.width + bgPaddingFinal.left + bgPaddingFinal.right,\n        x: -bgPaddingFinal.left,\n        y: -bgPaddingFinal.top,\n        height: this.state.bbox.height + bgPaddingFinal.top + bgPaddingFinal.bottom,\n        stroke: \"none\",\n        fill: \"white\",\n        fillOpacity: \"0\"\n      }), noteTitle, noteText), noteLineType, handle);\n    }\n  }]);\n\n  return Note;\n}(_react.default.Component);\n\nexports.default = Note;\nNote.defaultProps = {\n  wrap: 120,\n  align: \"dynamic\",\n  orientation: \"topBottom\",\n  padding: 3\n};\nNote.propTypes = {\n  dx: _propTypes.default.number,\n  dy: _propTypes.default.number,\n  title: _propTypes.default.string,\n  label: _propTypes.default.string,\n  orientation: _propTypes.default.oneOf([\"leftRight\", \"topBottom\"]),\n  padding: _propTypes.default.number,\n  bgPadding: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.object]),\n  align: _propTypes.default.oneOf([\"left\", \"right\", \"middle\", \"top\", \"bottom\", \"dynamic\"]),\n  editMode: _propTypes.default.bool,\n  lineType: _propTypes.default.oneOf([\"vertical\", \"horizontal\"]),\n  color: _propTypes.default.string,\n  titleColor: _propTypes.default.string,\n  labelColor: _propTypes.default.string\n};","map":null,"metadata":{},"sourceType":"script"}